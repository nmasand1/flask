import os
import json
import logging
import logging.config
import requests
import uuid
import yaml
import streamlit as st
from dotenv import load_dotenv
from services import bedrock_agent_runtime

# Load environment variables
load_dotenv()

# Configure logging using YAML if available
if os.path.exists("logging.yaml"):
    with open("logging.yaml", "r") as file:
        config = yaml.safe_load(file)
        logging.config.dictConfig(config)
else:
    log_level = logging.getLevelNamesMapping().get(os.environ.get("LOG_LEVEL", "INFO"), logging.INFO)
    logging.basicConfig(level=log_level)

logger = logging.getLogger(__name__)

# Get AWS credentials
def get_aws_credentials():
    jwt_response = requests.post(
        os.getenv("AWS_JWT_TOKEN_URL"),
        json={"username": os.getenv("AWS_USER"), "password": os.getenv("AWS_PASS")},
        headers={"content-type": "application/json", "accept": "*"},
        verify=False
    )
    jwt_token = jwt_response.json()["token"]
    creds_response = requests.get(
        f"{os.getenv('AWS_SESSION_TOKEN_URL')}{os.getenv('AWS_ROLE_ARN')}",
        headers={"authorization": f"Bearer {jwt_token}"},
        verify=False
    )
    return creds_response.json()["Credentials"]

# Get config from environment variables
agent_id = os.getenv("BEDROCK_AGENT_ID")
agent_alias_id = os.getenv("BEDROCK_AGENT_ALIAS_ID", "TSTALIASID")
ui_title = os.getenv("BEDROCK_AGENT_TEST_UI_TITLE", "Agents for Amazon Bedrock Test UI")
ui_icon = os.getenv("BEDROCK_AGENT_TEST_UI_ICON")

def init_session_state():
    st.session_state.session_id = str(uuid.uuid4())
    st.session_state.messages = []
    st.session_state.citations = []
    st.session_state.trace = {}

# General page configuration
st.set_page_config(page_title=ui_title, page_icon=ui_icon, layout="wide")
st.title(ui_title)
if len(st.session_state.items()) == 0:
    init_session_state()

# Sidebar button to reset session state
with st.sidebar:
    if st.button("Reset Session"):
        init_session_state()

# Display chat messages
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"], unsafe_allow_html=True)

# Chat input handling
if prompt := st.chat_input():
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.write(prompt)

    with st.chat_message("assistant"):
        with st.spinner():
            response = bedrock_agent_runtime.invoke_agent(
                agent_id, agent_alias_id, st.session_state.session_id, prompt
            )
            output_text = response["output_text"]

            # Parse JSON response if applicable
            try:
                output_json = json.loads(output_text, strict=False)
                if "instruction" in output_json and "result" in output_json:
                    output_text = output_json["result"]
            except json.JSONDecodeError:
                pass

            # Process citations
            if response["citations"]:
                citation_num = 1
                output_text = re.sub(r"%\[(\d+)\]%", r"<sup>[\1]</sup>", output_text)
                citation_locs = ""
                for citation in response["citations"]:
                    for retrieved_ref in citation["retrievedReferences"]:
                        citation_marker = f"[{citation_num}]"
                        citation_locs += f"\n<br>{citation_marker} {retrieved_ref['location'].get('url', 'Unknown Source')}"
                        citation_num += 1
                output_text += f"\n{citation_locs}"

            st.session_state.messages.append({"role": "assistant", "content": output_text})
            st.session_state.citations = response["citations"]
            st.session_state.trace = response["trace"]
            st.markdown(output_text, unsafe_allow_html=True)

# Sidebar trace display
with st.sidebar:
    st.title("Trace")
    step_num = 1
    for trace_type in ["preGuardrailTrace", "orchestrationTrace", "postGuardrailTrace"]:
        if trace_type in st.session_state.trace:
            st.subheader(trace_type.replace("Trace", ""))
            for trace in st.session_state.trace[trace_type]:
                with st.expander(f"Trace Step {step_num}"):
                    st.code(json.dumps(trace, indent=2), language="json")
                step_num += 1
    
    st.subheader("Citations")
    if st.session_state.citations:
        for i, citation in enumerate(st.session_state.citations, start=1):
            with st.expander(f"Citation [{i}]"):
                st.code(json.dumps(citation, indent=2), language="json")
    else:
        st.text("None")
