import streamlit as st
import boto3
import os
import logging
import logging.config
import yaml
from dotenv import load_dotenv
import requests

# Load environment variables
load_dotenv()

# Load logging configuration
if os.path.exists("logging.yaml"):
    with open("logging.yaml", "r") as file:
        config = yaml.safe_load(file)
        logging.config.dictConfig(config)

logger = logging.getLogger(__name__)

def get_aws_credentials():
    try:
        logger.info("Requesting JWT tokenâ€¦")
        jwt_token_url = os.getenv("AWS_JWT_TOKEN_URL")
        role_arn = os.getenv("AWS_ROLE_ARN")
        session_token_url = os.getenv("AWS_SESSION_TOKEN_URL")
        
        if not jwt_token_url or not role_arn or not session_token_url:
            raise ValueError("Missing required AWS environment variables.")
        
        response = requests.get(jwt_token_url)
        response.raise_for_status()
        jwt_token = response.json().get("token")
        
        headers = {"Authorization": f"Bearer {jwt_token}"}
        response = requests.get(session_token_url, headers=headers)
        response.raise_for_status()
        session_credentials = response.json()
        
        return {
            "AccessKeyId": session_credentials.get("AccessKeyId"),
            "SecretAccessKey": session_credentials.get("SecretAccessKey"),
            "SessionToken": session_credentials.get("SessionToken"),
        }
    except requests.RequestException as e:
        logger.error(f"Error fetching AWS credentials: {e}")
        st.error(f"Failed to retrieve AWS credentials: {e}")
        return None

def patch_bedrock_agent_runtime():
    credentials = get_aws_credentials()
    if not credentials:
        return
    
    try:
        client = boto3.client(
            "bedrock-agent-runtime",
            region_name="us-west-2",
            aws_access_key_id=credentials["AccessKeyId"],
            aws_secret_access_key=credentials["SecretAccessKey"],
            aws_session_token=credentials["SessionToken"],
        )
        st.success("Successfully connected to Bedrock Agent Runtime.")
    except Exception as e:
        logger.error(f"Error connecting to Bedrock Agent Runtime: {e}")
        st.error(f"Failed to connect: {e}")

# Streamlit UI
st.title("AWS Credentials & Bedrock Agent Runtime")
if st.button("Fetch AWS Credentials"):
    patch_bedrock_agent_runtime()

# Add some spacing
st.markdown("<style>div.stButton > button {margin-top: 10px;}</style>", unsafe_allow_html=True)
